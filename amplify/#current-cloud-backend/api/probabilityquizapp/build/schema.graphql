type Scores @aws_iam @aws_api_key {
  id: ID!
  score: Int
  Quiz: Quiz
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  scoresQuizId: ID
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

type Quiz @aws_iam @aws_api_key {
  id: ID!
  difficulty: Difficulty
  Questions(filter: ModelQuestionsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionsConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Answers @aws_iam @aws_api_key {
  id: ID!
  text: String
  Questions(filter: ModelAnswersQuestionsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAnswersQuestionsConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Questions @aws_iam @aws_api_key {
  id: ID!
  text: String
  answerss(filter: ModelAnswersQuestionsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAnswersQuestionsConnection
  AcceptedAnswer: Answers
  quizID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  questionsAcceptedAnswerId: ID
}

type AnswersQuestions @aws_iam @aws_api_key {
  id: ID!
  answersId: ID!
  questionsId: ID!
  answers: Answers!
  questions: Questions!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelScoresConnection @aws_api_key @aws_iam {
  items: [Scores]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelScoresFilterInput {
  id: ModelIDInput
  score: ModelIntInput
  owner: ModelStringInput
  and: [ModelScoresFilterInput]
  or: [ModelScoresFilterInput]
  not: ModelScoresFilterInput
  _deleted: ModelBooleanInput
  scoresQuizId: ModelIDInput
}

type Query {
  getScores(id: ID!): Scores @aws_api_key @aws_iam
  listScores(filter: ModelScoresFilterInput, limit: Int, nextToken: String): ModelScoresConnection @aws_api_key @aws_iam
  syncScores(filter: ModelScoresFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelScoresConnection @aws_api_key @aws_iam
  getQuiz(id: ID!): Quiz @aws_api_key @aws_iam
  listQuizzes(filter: ModelQuizFilterInput, limit: Int, nextToken: String): ModelQuizConnection @aws_api_key @aws_iam
  syncQuizzes(filter: ModelQuizFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuizConnection @aws_api_key @aws_iam
  getAnswers(id: ID!): Answers @aws_api_key @aws_iam
  listAnswers(filter: ModelAnswersFilterInput, limit: Int, nextToken: String): ModelAnswersConnection @aws_api_key @aws_iam
  syncAnswers(filter: ModelAnswersFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAnswersConnection @aws_api_key @aws_iam
  getQuestions(id: ID!): Questions @aws_api_key @aws_iam
  listQuestions(filter: ModelQuestionsFilterInput, limit: Int, nextToken: String): ModelQuestionsConnection @aws_api_key @aws_iam
  syncQuestions(filter: ModelQuestionsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuestionsConnection @aws_api_key @aws_iam
  questionsByQuizID(quizID: ID!, sortDirection: ModelSortDirection, filter: ModelQuestionsFilterInput, limit: Int, nextToken: String): ModelQuestionsConnection @aws_api_key @aws_iam
  getAnswersQuestions(id: ID!): AnswersQuestions @aws_api_key @aws_iam
  listAnswersQuestions(filter: ModelAnswersQuestionsFilterInput, limit: Int, nextToken: String): ModelAnswersQuestionsConnection @aws_api_key @aws_iam
  syncAnswersQuestions(filter: ModelAnswersQuestionsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAnswersQuestionsConnection @aws_api_key @aws_iam
  answersQuestionsByAnswersId(answersId: ID!, sortDirection: ModelSortDirection, filter: ModelAnswersQuestionsFilterInput, limit: Int, nextToken: String): ModelAnswersQuestionsConnection @aws_api_key @aws_iam
  answersQuestionsByQuestionsId(questionsId: ID!, sortDirection: ModelSortDirection, filter: ModelAnswersQuestionsFilterInput, limit: Int, nextToken: String): ModelAnswersQuestionsConnection @aws_api_key @aws_iam
}

input ModelScoresConditionInput {
  score: ModelIntInput
  owner: ModelStringInput
  and: [ModelScoresConditionInput]
  or: [ModelScoresConditionInput]
  not: ModelScoresConditionInput
  _deleted: ModelBooleanInput
  scoresQuizId: ModelIDInput
}

input CreateScoresInput {
  id: ID
  score: Int
  owner: String
  _version: Int
  scoresQuizId: ID
}

input UpdateScoresInput {
  id: ID!
  score: Int
  owner: String
  _version: Int
  scoresQuizId: ID
}

input DeleteScoresInput {
  id: ID!
  _version: Int
}

type Mutation {
  createScores(input: CreateScoresInput!, condition: ModelScoresConditionInput): Scores @aws_api_key @aws_iam
  updateScores(input: UpdateScoresInput!, condition: ModelScoresConditionInput): Scores @aws_api_key @aws_iam
  deleteScores(input: DeleteScoresInput!, condition: ModelScoresConditionInput): Scores @aws_api_key @aws_iam
  createQuiz(input: CreateQuizInput!, condition: ModelQuizConditionInput): Quiz @aws_api_key @aws_iam
  updateQuiz(input: UpdateQuizInput!, condition: ModelQuizConditionInput): Quiz @aws_api_key @aws_iam
  deleteQuiz(input: DeleteQuizInput!, condition: ModelQuizConditionInput): Quiz @aws_api_key @aws_iam
  createAnswers(input: CreateAnswersInput!, condition: ModelAnswersConditionInput): Answers @aws_api_key @aws_iam
  updateAnswers(input: UpdateAnswersInput!, condition: ModelAnswersConditionInput): Answers @aws_api_key @aws_iam
  deleteAnswers(input: DeleteAnswersInput!, condition: ModelAnswersConditionInput): Answers @aws_api_key @aws_iam
  createQuestions(input: CreateQuestionsInput!, condition: ModelQuestionsConditionInput): Questions @aws_api_key @aws_iam
  updateQuestions(input: UpdateQuestionsInput!, condition: ModelQuestionsConditionInput): Questions @aws_api_key @aws_iam
  deleteQuestions(input: DeleteQuestionsInput!, condition: ModelQuestionsConditionInput): Questions @aws_api_key @aws_iam
  createAnswersQuestions(input: CreateAnswersQuestionsInput!, condition: ModelAnswersQuestionsConditionInput): AnswersQuestions @aws_api_key @aws_iam
  updateAnswersQuestions(input: UpdateAnswersQuestionsInput!, condition: ModelAnswersQuestionsConditionInput): AnswersQuestions @aws_api_key @aws_iam
  deleteAnswersQuestions(input: DeleteAnswersQuestionsInput!, condition: ModelAnswersQuestionsConditionInput): AnswersQuestions @aws_api_key @aws_iam
}

input ModelSubscriptionScoresFilterInput {
  id: ModelSubscriptionIDInput
  score: ModelSubscriptionIntInput
  owner: ModelSubscriptionStringInput
  and: [ModelSubscriptionScoresFilterInput]
  or: [ModelSubscriptionScoresFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateScores(filter: ModelSubscriptionScoresFilterInput): Scores @aws_subscribe(mutations: ["createScores"]) @aws_api_key @aws_iam
  onUpdateScores(filter: ModelSubscriptionScoresFilterInput): Scores @aws_subscribe(mutations: ["updateScores"]) @aws_api_key @aws_iam
  onDeleteScores(filter: ModelSubscriptionScoresFilterInput): Scores @aws_subscribe(mutations: ["deleteScores"]) @aws_api_key @aws_iam
  onCreateQuiz(filter: ModelSubscriptionQuizFilterInput): Quiz @aws_subscribe(mutations: ["createQuiz"]) @aws_api_key @aws_iam
  onUpdateQuiz(filter: ModelSubscriptionQuizFilterInput): Quiz @aws_subscribe(mutations: ["updateQuiz"]) @aws_api_key @aws_iam
  onDeleteQuiz(filter: ModelSubscriptionQuizFilterInput): Quiz @aws_subscribe(mutations: ["deleteQuiz"]) @aws_api_key @aws_iam
  onCreateAnswers(filter: ModelSubscriptionAnswersFilterInput): Answers @aws_subscribe(mutations: ["createAnswers"]) @aws_api_key @aws_iam
  onUpdateAnswers(filter: ModelSubscriptionAnswersFilterInput): Answers @aws_subscribe(mutations: ["updateAnswers"]) @aws_api_key @aws_iam
  onDeleteAnswers(filter: ModelSubscriptionAnswersFilterInput): Answers @aws_subscribe(mutations: ["deleteAnswers"]) @aws_api_key @aws_iam
  onCreateQuestions(filter: ModelSubscriptionQuestionsFilterInput): Questions @aws_subscribe(mutations: ["createQuestions"]) @aws_api_key @aws_iam
  onUpdateQuestions(filter: ModelSubscriptionQuestionsFilterInput): Questions @aws_subscribe(mutations: ["updateQuestions"]) @aws_api_key @aws_iam
  onDeleteQuestions(filter: ModelSubscriptionQuestionsFilterInput): Questions @aws_subscribe(mutations: ["deleteQuestions"]) @aws_api_key @aws_iam
  onCreateAnswersQuestions(filter: ModelSubscriptionAnswersQuestionsFilterInput): AnswersQuestions @aws_subscribe(mutations: ["createAnswersQuestions"]) @aws_api_key @aws_iam
  onUpdateAnswersQuestions(filter: ModelSubscriptionAnswersQuestionsFilterInput): AnswersQuestions @aws_subscribe(mutations: ["updateAnswersQuestions"]) @aws_api_key @aws_iam
  onDeleteAnswersQuestions(filter: ModelSubscriptionAnswersQuestionsFilterInput): AnswersQuestions @aws_subscribe(mutations: ["deleteAnswersQuestions"]) @aws_api_key @aws_iam
}

type ModelQuizConnection @aws_api_key @aws_iam {
  items: [Quiz]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDifficultyInput {
  eq: Difficulty
  ne: Difficulty
}

input ModelQuizFilterInput {
  id: ModelIDInput
  difficulty: ModelDifficultyInput
  and: [ModelQuizFilterInput]
  or: [ModelQuizFilterInput]
  not: ModelQuizFilterInput
  _deleted: ModelBooleanInput
}

input ModelQuizConditionInput {
  difficulty: ModelDifficultyInput
  and: [ModelQuizConditionInput]
  or: [ModelQuizConditionInput]
  not: ModelQuizConditionInput
  _deleted: ModelBooleanInput
}

input CreateQuizInput {
  id: ID
  difficulty: Difficulty
  _version: Int
}

input UpdateQuizInput {
  id: ID!
  difficulty: Difficulty
  _version: Int
}

input DeleteQuizInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionQuizFilterInput {
  id: ModelSubscriptionIDInput
  difficulty: ModelSubscriptionStringInput
  and: [ModelSubscriptionQuizFilterInput]
  or: [ModelSubscriptionQuizFilterInput]
  _deleted: ModelBooleanInput
}

type ModelAnswersConnection @aws_api_key @aws_iam {
  items: [Answers]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAnswersFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  and: [ModelAnswersFilterInput]
  or: [ModelAnswersFilterInput]
  not: ModelAnswersFilterInput
  _deleted: ModelBooleanInput
}

input ModelAnswersConditionInput {
  text: ModelStringInput
  and: [ModelAnswersConditionInput]
  or: [ModelAnswersConditionInput]
  not: ModelAnswersConditionInput
  _deleted: ModelBooleanInput
}

input CreateAnswersInput {
  id: ID
  text: String
  _version: Int
}

input UpdateAnswersInput {
  id: ID!
  text: String
  _version: Int
}

input DeleteAnswersInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAnswersFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  and: [ModelSubscriptionAnswersFilterInput]
  or: [ModelSubscriptionAnswersFilterInput]
  _deleted: ModelBooleanInput
}

type ModelQuestionsConnection @aws_iam @aws_api_key {
  items: [Questions]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelQuestionsFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  quizID: ModelIDInput
  and: [ModelQuestionsFilterInput]
  or: [ModelQuestionsFilterInput]
  not: ModelQuestionsFilterInput
  _deleted: ModelBooleanInput
  questionsAcceptedAnswerId: ModelIDInput
}

input ModelQuestionsConditionInput {
  text: ModelStringInput
  quizID: ModelIDInput
  and: [ModelQuestionsConditionInput]
  or: [ModelQuestionsConditionInput]
  not: ModelQuestionsConditionInput
  _deleted: ModelBooleanInput
  questionsAcceptedAnswerId: ModelIDInput
}

input CreateQuestionsInput {
  id: ID
  text: String
  quizID: ID!
  _version: Int
  questionsAcceptedAnswerId: ID
}

input UpdateQuestionsInput {
  id: ID!
  text: String
  quizID: ID
  _version: Int
  questionsAcceptedAnswerId: ID
}

input DeleteQuestionsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionQuestionsFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  quizID: ModelSubscriptionIDInput
  and: [ModelSubscriptionQuestionsFilterInput]
  or: [ModelSubscriptionQuestionsFilterInput]
  _deleted: ModelBooleanInput
}

type ModelAnswersQuestionsConnection @aws_iam @aws_api_key {
  items: [AnswersQuestions]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAnswersQuestionsFilterInput {
  id: ModelIDInput
  answersId: ModelIDInput
  questionsId: ModelIDInput
  and: [ModelAnswersQuestionsFilterInput]
  or: [ModelAnswersQuestionsFilterInput]
  not: ModelAnswersQuestionsFilterInput
  _deleted: ModelBooleanInput
}

input ModelAnswersQuestionsConditionInput {
  answersId: ModelIDInput
  questionsId: ModelIDInput
  and: [ModelAnswersQuestionsConditionInput]
  or: [ModelAnswersQuestionsConditionInput]
  not: ModelAnswersQuestionsConditionInput
  _deleted: ModelBooleanInput
}

input CreateAnswersQuestionsInput {
  id: ID
  answersId: ID!
  questionsId: ID!
  _version: Int
}

input UpdateAnswersQuestionsInput {
  id: ID!
  answersId: ID
  questionsId: ID
  _version: Int
}

input DeleteAnswersQuestionsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAnswersQuestionsFilterInput {
  id: ModelSubscriptionIDInput
  answersId: ModelSubscriptionIDInput
  questionsId: ModelSubscriptionIDInput
  and: [ModelSubscriptionAnswersQuestionsFilterInput]
  or: [ModelSubscriptionAnswersQuestionsFilterInput]
  _deleted: ModelBooleanInput
}
